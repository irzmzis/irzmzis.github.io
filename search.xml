<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/26/hello-world/"/>
      <url>/2023/05/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用github pages 搭建静态博客网站-原理详解及环境搭建</title>
      <link href="/2023/05/03/%E4%BD%BF%E7%94%A8github%20pages%20%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99-%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/05/03/%E4%BD%BF%E7%94%A8github%20pages%20%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99-%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>近年来越来越多人开始了解并使用 GitHub Pages 来搭建 Hexo 静态博客网站，其特点在于完全免费使用，并且非常稳定，目前是很多人正在使用的个人笔记解决方案。<br>虽然环境搭建相对麻烦，但是配置完成后，基本不需要操心维护的问题，甚至放了几年都忘记了，打开来看文章依然还在。</p></blockquote><hr><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><ol><li>简介</li><li>   准备：环境搭建<br>1. 注意事项<br>2. 环境搭建</li><li>   连接 Github</li><li>   创建 Github Pages 仓库</li><li>   本地安装 Hexo 博客程序<br>  1. 安装 Hexo<br>  2. Hexo 初始化和本地预览</li><li>   部署 Hexo 到 GitHub Pages</li><li>   绑定域名</li><li>   开始使用<br>  1. 发布文章<br>  2. 网站设置<br>  3. 更换主题<br>  4. 常用代码</li><li>   常见问题</li></ol><hr><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><h2 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="GitHub Pages 是什么？"></a>GitHub Pages 是什么？</h2><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p><h2 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a>Hexo 是什么？</h2><blockquote><p>官网：<a href="hexo.io%22hexo,%E7%AE%80%E5%8D%95%E5%B0%B1%E5%A5%BD">hexo.io</a></p></blockquote><p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><h2 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="Hexo + GitHub 文章发布原理"></a>Hexo + GitHub 文章发布原理</h2><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p><h2 id="优点和不足"><a href="#优点和不足" class="headerlink" title="优点和不足"></a>优点和不足</h2><p>优点：完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……<br>不足：发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p><h1 id="2-准备"><a href="#2-准备" class="headerlink" title="2. 准备"></a>2. 准备</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>输入代码时，核对准确，最好切换成英文输入法；</li><li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li><li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li><li>小白请严格按步骤进行，不要跳！</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p><blockquote><p><a href="https://nodejs.org/zh-cn%22">Node.js官网</a></p><p><a href="https://git-scm.com/downloads">Git官网</a></p></blockquote><p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。<br>安装完成后，Win+R 输入 cmd 并打开，依次输入 node -v、npm -v 和 git –version 并回车，如下图出现程序版本号即可。</p><h1 id="3-连接-Github"><a href="#3-连接-Github" class="headerlink" title="3. 连接 Github"></a>3. 连接 Github</h1><ul><li>使用邮箱注册 GitHub 账户，选择免费账户（Free），并完成邮件验证。<br>右键 -&gt; Git Bash Here，设置用户名和邮箱：</li></ul><pre><code>git config --global user.name &quot;GitHub 用户名&quot;git config --global user.email &quot;GitHub 邮箱&quot;```</code></pre><ul><li><p>创建 SSH 密匙：<br>输入 ssh-keygen -t rsa -C “GitHub 邮箱”，然后一路回车。</p></li><li><p>添加密匙：<br>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。<br>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。<br>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p></li><li><p>验证连接：<br>打开 Git Bash，输入 ssh -T <a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#x69;&#116;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#x6f;&#x6d;</a> 出现 “Are you sure……”，输入 yes 回车确认。<br>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p></li></ul><h1 id="4-创建-Github-Pages-仓库"><a href="#4-创建-Github-Pages-仓库" class="headerlink" title="4. 创建 Github Pages 仓库"></a>4. 创建 Github Pages 仓库</h1><blockquote><p>GitHub 主页右上角加号 -&gt; New repository：</p></blockquote><ul><li>用户名.github.io</li><li>勾选 “Initialize this repository with a README”</li><li>Description 选填<blockquote><p>填好后点击 Create repository 创建。</p></blockquote></li></ul><p>创建后默认自动启用 HTTPS，博客地址为：https:&#x2F;&#x2F;用户名.github.io</p><p>本地安装 Hexo 博客程序<br>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p><h2 id="4-1-安装-Hexo"><a href="#4-1-安装-Hexo" class="headerlink" title="4.1 安装 Hexo"></a>4.1 安装 Hexo</h2><p>使用 npm 一键安装 Hexo 博客程序：<br>npm install -g hexo-cli<br>Mac 用户需要管理员权限（sudo），运行这条命令：<br>sudo npm install -g hexo-cli<br>安装时间有点久（真的很慢！），界面也没任何反应，耐心等待，安装完成后如下图。</p><h2 id="4-2-Hexo-初始化和本地预览"><a href="#4-2-Hexo-初始化和本地预览" class="headerlink" title="4.2 Hexo 初始化和本地预览"></a>4.2 Hexo 初始化和本地预览</h2><p>初始化并安装所需组件：<br>hexo init      # 初始化<br>npm install    # 安装组件<br>完成后依次输入下面命令，启动本地服务器进行预览：<br>hexo g   # 生成页面<br>hexo s   # 启动预览<br>访问 <a href="http://localhost:4000，出现">http://localhost:4000，出现</a> Hexo 默认页面，本地博客安装成功！</p><blockquote><p>Tips：如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。<br>Hexo 博客文件夹目录结构如下：</p></blockquote><h1 id="5-部署-Hexo-到-GitHub-Pages"><a href="#5-部署-Hexo-到-GitHub-Pages" class="headerlink" title="5. 部署 Hexo 到 GitHub Pages"></a>5. 部署 Hexo 到 GitHub Pages</h1><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p><ul><li>首先安装</li></ul><pre><code>hexo-deployer-git：npm install hexo-deployer-git --save</code></pre><ul><li>然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：</li></ul><pre><code>deploy:  type: git  repository: git@github.com:用户名/用户名.github.io.git  branch: master</code></pre><p>完成后运行 hexo d 将网站上传部署到 GitHub Pages。<br>完成！这时访问我们的 GitHub 域名 https:&#x2F;&#x2F;用户名.github.io 就可以看到 Hexo 网站了。</p><h1 id="6-绑定域名（这里可以根据自己需要选择，使用GitHub传统域名也可以）"><a href="#6-绑定域名（这里可以根据自己需要选择，使用GitHub传统域名也可以）" class="headerlink" title="6. 绑定域名（这里可以根据自己需要选择，使用GitHub传统域名也可以）"></a>6. 绑定域名（这里可以根据自己需要选择，使用GitHub传统域名也可以）</h1><p>博客搭建完成使用的是 GitHub 的子域名（用户名.github.io），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。<br>使用 Namesilo 进行注册，便宜好用没啥套路，使用优惠码 okoff 优惠一美元，com 域名大概 50 块一年。</p><h2 id="6-1-域名注册和解析"><a href="#6-1-域名注册和解析" class="headerlink" title="6.1 域名注册和解析"></a>6.1 域名注册和解析</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/33921436">域名注册和解析教程：Namesilo 域名购买及使用教程</a><br> 按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 用户名.github.io。</li></ul><h2 id="6-2-绑定域名到-Hexo-博客"><a href="#6-2-绑定域名到-Hexo-博客" class="headerlink" title="6.2 绑定域名到 Hexo 博客"></a>6.2 绑定域名到 Hexo 博客</h2><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a href="http://www.example.com,保存名称为/">http://www.example.com，保存名称为</a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。<br>清除缓存等文件并重新发布网站：</p><pre><code class="hexo">hexo g       # 生成页面hexo s       # 启动预览</code></pre><p>现在就可以使用自己的域名访问 Hexo 博客了。</p><h2 id="6-3-开启-HTTPS"><a href="#6-3-开启-HTTPS" class="headerlink" title="6.3 开启 HTTPS"></a>6.3 开启 HTTPS</h2><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p><p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p><h1 id="7-开始使用"><a href="#7-开始使用" class="headerlink" title="7. 开始使用"></a>7. 开始使用</h1><h2 id="7-1-发布文章"><a href="#7-1-发布文章" class="headerlink" title="7.1 发布文章"></a>7.1 发布文章</h2><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：<br>        hexo new “My New Post”<br>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。<br>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。</p><pre><code>hexo g   # 生成页面hexo d   # 部署发布</code></pre><p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 hexo g 和 hexo d 发布。</p><pre><code>\---title: Hello World # 标题date: 2019/3/26 hh:mm:ss # 时间categories: # 分类- Diarytags: # 标签- PS3- Games摘要&lt;!--more--&gt;正文</code></pre><h2 id="7-2-网站设置"><a href="#7-2-网站设置" class="headerlink" title="7.2 网站设置"></a>7.2 网站设置</h2><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考官方文档按需要编辑。<br>注意：冒号后要加一个空格！</p><h2 id="7-3-更换主题"><a href="#7-3-更换主题" class="headerlink" title="7.3 更换主题"></a>7.3 更换主题</h2><p>在 Themes | Hexo 选择一个喜欢的主题，比如 NexT，进入网站目录打开 Git Bash Here 下载主题：</p><pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre><p>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p><h2 id="7-4-常用命令"><a href="#7-4-常用命令" class="headerlink" title="7.4 常用命令"></a>7.4 常用命令</h2><pre><code>hexo new &quot;name&quot;       # 新建文章hexo new page &quot;name&quot;  # 新建页面hexo g                # 生成页面hexo d                # 部署hexo g -d             # 生成页面并部署hexo s                # 本地预览hexo clean            # 清除缓存和已生成的静态文件hexo help             # 帮助</code></pre><h1 id="8-常见问题"><a href="#8-常见问题" class="headerlink" title="8. 常见问题"></a>8. 常见问题</h1><ol><li><p>Hexo 设置显示文章摘要，首页不显示全文<br>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <span id="more"></span> 进行分段。<br>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p></li><li><p>设置网站图标<br>进入 themes&#x2F;主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：favicon: 图标地址。（不同主题可能略有差别）</p></li><li><p>修改并部署后没有效果<br>使用 hexo clean 清理后重新部署。</p></li><li><p>开启 HTTPS 后访问网站显示连接不安全？<br>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p></li><li><p>Mac 安装 Hexo 报错无法安装<br>Mac 用户需要管理员权限运行，使用 sudo npm install -g hexo-cli 命令安装。</p></li><li><p>npm 下载速度慢，甚至完全没反应<br>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。<br>临时更换方法：在 npm 安装命令后面加上：</p></li></ol><pre><code>--registry https://registry.npm.taobao.org </code></pre><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><blockquote><p>Hexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。<br>可以说是一种比较极客的写博客方式，但是优势也是明显的——免费稳定省心，比较适合爱折腾研究的用户，或者没有在线发文需求的朋友。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> hexo入门 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
